---
// Definición de la interfaz Repo
interface Repo {
  name: string;
  description: string;
  html_url: string;
  language: string;
  imageUrl?: string; 
}

// Función para obtener imágenes de Pexels
export async function getPexelsImages(query: string) {
  const pexelsApiKey = 'OHiaAMI1GhFGYwBzJtNzHCzLGaIjESwifm0ZPBzdmK98rHGNSO6VYLv7'; // Reemplaza con tu API Key de Pexels
  const url = `https://api.pexels.com/v1/search?query=${query}&per_page=3`;
  
  const response = await fetch(url, {
    headers: {
      Authorization: pexelsApiKey,
    },
  });

  if (response.ok) {
    return await response.json(); 
  } else {
    console.error('Error al obtener imágenes de Pexels:', response.statusText);
    return { photos: [] }; 
  }
}

export async function getGitHubRepos() {
  const username = 'sergiomz1'; // Usuario de GitHub
  const url = `https://api.github.com/users/${username}/repos`;

  const response = await fetch(url, {
    headers: {
      Accept: 'application/vnd.github.v3+json',
    },
  });

  if (response.ok) {
    console.log('La API de GitHub funciona.');
    
    // Filtra los repositorios para obtener solo los que son de JavaScript
    const allRepos: Repo[] = await response.json();
    const jsRepos = allRepos.filter(repo => repo.language === 'JavaScript').slice(0, 2); // Obtiene solo los primeros 3

    // Obtiene imágenes de Pexels
    const imagesResponse = await getPexelsImages('software');
    const images = imagesResponse.photos;

    // Asigna imágenes 
    jsRepos.forEach((repo, index) => {
      repo.imageUrl = images[index]?.src?.medium || 'https://via.placeholder.com/150'; // Imagen de Pexels o por defecto
    });
    
    return { success: true, repos: jsRepos }; 
  } else {
    console.error('Error al obtener repositorios de GitHub:', response.statusText);
    console.log('La API de GitHub no funciona.');
    return { success: false, repos: [] }; 
  }
}
---